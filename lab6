import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import lagrange #імпортуємо функцію lagrange з бібліотеки

x=np.array([-4.,-2.,1.,3.], dtype=float)
y=np.array([-8.,10.,-8.,20.], dtype=float)
x_test = -3 # точка, в якій потрібно обчислити значення

def lagrange_interpolation(x, y, x_test):
    n = len(x)
    p = np.zeros(n) # масив для зберігання значень багаточленів L_i
    for i in range(n):
        # обчислюємо багаточлен L_i, який складається з n членів
        # кожен член дорівнює добутку (x-x_j)/(x_i-x_j) для j=0..n, j!=i
        p_i = 1
        for j in range(n):
            if i != j:
                p_i *= (x_test - x[j])/(x[i] - x[j])
        p[i] = p_i
    return np.dot(y, p) # повертаємо значення багаточлена у точці x_test

# обчислюємо інтерполяційний багаточлен та його значення у точці x_test
f_interp = lagrange_interpolation(x, y, x_test)

print("Значення функції у точці x_test =", f_interp.round(4))

 
xnew=np.linspace(np.min(x),np.max(x),100) #точки, за якими будуємо графік
ynew=[lagrange_interpolation(x,y,i) for i in xnew]

plt.plot(x,y,'o',xnew,ynew) #будуємо графік функції Лагранжа
plt.title('Lagrange Polynomial_1')
plt.grid(True)
plt.show()   

Перевірка
f = lagrange(x, y)
fig = plt.figure(figsize = (7,5))
plt.plot(xnew, f(xnew), 'b', x, y, 'ro')
plt.title('Lagrange Polynomial_2')
plt.grid()
plt.xlabel('x')
plt.ylabel('y')
plt.show()
